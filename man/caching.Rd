% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/caching.R
\name{caching}
\alias{caching}
\alias{simpleCache}
\alias{biocCache}
\title{Caching functions}
\usage{
simpleCache(cache, key, save, update = FALSE)

biocCache(cache, key, save, update = FALSE)
}
\arguments{
\item{cache}{For \code{biocCache}, a BiocFileCache object.

For \code{simpleCache}, a string containing a path to a cache directory.}

\item{key, save}{See \code{\link{getFileMetadata}} for details on the caching function.}

\item{update}{Logical scalar indicating whether assets in the cache should be forcibly updated.
Useful for resolving corrupted caches or incomplete downloads.}
}
\value{
String containing a path to the cached resource inside \code{cache}.
}
\description{
This implements a few possible \code{cache} functions for use in \code{\link{getFileMetadata}} and friends.
}
\details{
For \code{simpleCache}, caching is done by downloading directly to the file system with no further tracking.

For \code{biocCache}, caching is based on \pkg{BiocFileCache}, which tracks all calls via a central SQLite database.

In all cases, downloads and access are protected by \pkg{filelock}, so multiple processes can query/update the cache safely.
}
\examples{
library(BiocFileCache)
tmp <- tempfile()
bfc <- BiocFileCache(tmp, ask=FALSE)
cache.fun <- function(key, save) biocCache(bfc, key, save)

# First query hits the cache:
getFile(example.id, example.url, cache = cache.fun)

# Second query re-uses the cache:
getFile(example.id, example.url, cache = cache.fun)

}
\seealso{
\code{\link{getFileMetadata}} for more details on the caching function.
}
\author{
Aaron Lun
}
