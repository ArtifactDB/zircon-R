% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/uploadFiles.R
\name{initializeUpload}
\alias{initializeUpload}
\alias{createUploadStartUrl}
\alias{uploadFiles}
\alias{completeUpload}
\alias{abortUpload}
\title{Upload utilities, for wizards only}
\usage{
initializeUpload(
  dir,
  files,
  start.url,
  dedup.md5 = NULL,
  dedup.md5.field = NULL,
  dedup.link = NULL,
  expires = NULL,
  user.agent = NULL
)

createUploadStartUrl(url, project, version)

uploadFiles(dir, initial, user.agent = NULL, attempts = 3)

completeUpload(
  url,
  initial,
  index.wait = 600,
  must.index = FALSE,
  permissions = list(),
  overwrite.permissions = FALSE,
  user.agent = NULL
)

abortUpload(url, initial, user.agent = NULL)
}
\arguments{
\item{url}{String containing the URL to the REST API.}

\item{index.wait}{Numeric scalar specifying the number of seconds to wait when checking for correct indexing.}

\item{must.index}{Logical scalar indicating whether to throw an error if the indexing is not successful.
If \code{FALSE}, a warning is raised if the indexing times out (but an error will still be raised if the indexing explicitly fails).}

\item{token}{String containing a Keycloak token to authenticate the uploader.}
}
\value{
\code{initializeUpload} will return the \code{response} object from hitting the upload endpoint.
This will have already been checked for failure.

\code{uploadFiles} will upload all files to their URLs and return \code{NULL}.

\code{requestCompletion} will return the \code{response} object from hitting the completion endpoint.
This will have already been checked for failure.

\code{abortUrl} will return the \code{response} object from hitting the abort endpoint.
This will \emph{not} have been checked for failure, not least because this function is typically called in response to other errors during the upload;
we leave it to the caller to decide whether to add another error to the trace.
}
\description{
These are utilities for uploading files to ArtifactDB.
Not for the end-user or the typical package developer.
}
\author{
Aaron Lun
}
